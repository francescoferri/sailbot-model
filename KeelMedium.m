classdef KeelMedium
    
%{ 

Fixed variables that do not change through studies

FluidDensity;
FluidViscosity;
AirfoilMatrix;

Variables that change due to studies

W_speed
W_angle
boat_reaction
boat_speed
boat_heel
K_span
K_avg_ch
K_mass
K_airfoil

%}

    properties
        FluidDensity;
        FluidViscosity;
        AirfoilMatrix;
    end
    
    methods
        function obj = KeelMedium(rho_water, mu_water, airfoil_matrix)
            
            %SAILMEDIUM Construct an instance of this class
            
            obj.FluidDensity = rho_water;
            obj.FluidViscosity = mu_water;
            obj.AirfoilMatrix = airfoil_matrix;
        end
        
        function [boat_reaction, boat_heel, boat_speed] = computeKeelState(obj, W_speed, W_angle, boat_reaction, boat_speed, boat_heel, K_span, K_avg_ch, K_mass, K_airfoil)
            
            %% find new heel angle
            % generate y-axis keel lift, add to x-axis torque
            K_torque_debt = boat_reaction(2,1)*2; % assumed a perfect
            % force couple moment about the x-axis (sail force = keel force in y direction)

            % based on torque debt find new heel angle that would restore
            % equilibrium
            boat_heel_new = asin(K_torque_debt/(K_span*K_mass*9.81));
            heel_delta = boat_heel_new - boat_heel;
            boat_heel = boat_heel + heel_delta;

            % reset x-axis torque as we restored equilibrium
            boat_reaction(2,1) = 0;

            % %% find lift and drag, generated by the keel to keep equilibrium
            % 
            % K_area = K_span * K_avg_ch; % [m2] assumed to be square
            % boat_drift_force = boat_reaction(1,2); % y-axis force to counteract with the keel
            % 
            % % keel force of gravity
            % K_gravity = [0 0 -K_mass*9.81];
            % 
            % % airfoil plane (keel's direction)
            % n_keelfoil = [0 sin(boat_heel) -cos(boat_heel)];
            % K_force_hydro = [0 0 0];
            % boat_speed(2) = 0;
            % 
            % while( abs(K_force_hydro(2)) <  abs(boat_drift_force))
            % 
            %     boat_speed(2) = boat_speed(2) + 0.01;
            % 
            %     water_speed = norm(boat_speed);
            %     reynolds_number = obj.FluidDensity * K_avg_ch * water_speed/obj.FluidViscosity;
            % 
            %     K_alpha = atan(boat_speed(2)/boat_speed(1));
            % 
            %     % find matching coeficient
            %     [cl, cd, cdp, cm, alpha_v, at_stall] = findAirfoilCoeff(reynolds_number, K_alpha, K_airfoil);
            % 
            %     L = 0.5*cl*K_area*water_speed^2*obj.FluidDensity; % keel lift
            %     D = 0.5*cd*K_area*water_speed^2*obj.FluidDensity; % keel drag
            % 
            %     %% Keel Force: build 2 planes
            % 
            %     % water plane
            %     % water direction
            %     water = [-boat_speed(1) -boat_speed(2) 0];
            %     water_dir = water/norm(water);
            %     % vertical
            %     vertical = [0 0 1];
            %     % normal to water plane
            %     n_water = cross(water_dir, vertical);
            % 
            %     % using the two planes compute direction of drag
            %     drag_direction = cross(n_water, n_keelfoil);
            % 
            %     % Using the drag direction and keel direction we find lift
            %     lift_direction = cross(drag_direction, n_keelfoil);
            % 
            %     Lift = lift_direction*L;
            %     Drag = drag_direction*D;
            % 
            %     K_force_hydro = Lift + Drag;
            % 
            % end
            % 
            % %% Record changes into force balance
            % K_force = K_force_hydro + K_gravity;
            % boat_reaction(1,:) = boat_reaction(1,:) + K_force;
            % 
            % %% New Heel Angle
            % 
            % % determine new heel angle by solving force balance based on
            % % previously calculated forces.
            % syms new_boat_heel_sym;
            % new_n_keelfoil_sym = [0 sin(new_boat_heel_sym) -cos(new_boat_heel_sym)];
            % 
            % % Boat heel must be defined less than 90 to get one solution
            % constraints1 = new_boat_heel_sym <= deg2rad(90);
            % constraints2 = new_boat_heel_sym >= deg2rad(-90);
            % 
            % K_torque_x = -boat_reaction(2,1);
            % 
            % % Torque from Hydro (symbolic)
            % % Location of applied hydro force (switch with COP in the future)
            % R_Hydro = K_span/2;
            % arm_Hydro = R_Hydro*new_n_keelfoil_sym;
            % K_torque_hydro = cross(arm_Hydro,K_force_hydro);
            % 
            % %Torque from Gravity (symbolic)
            % R_Gravity = K_span; % approximated as end of keel. Add COG later
            % arm_Gravity = R_Gravity*new_n_keelfoil_sym;
            % K_torque_gravity = cross(arm_Gravity,K_gravity);
            % 
            % eqn = K_torque_x == K_torque_gravity(1) +K_torque_hydro(1);
            % new_boat_heel = double(solve(eqn,constraints1,constraints2, ...
            %     new_boat_heel_sym,"Real",true));
            % 
            % 
            % %% Keel Torques
            % new_n_keelfoil = [0 sin(new_boat_heel) -cos(new_boat_heel)];
            % 
            % K_torque = cross(R_Hydro*new_n_keelfoil, K_force_hydro) + ...
            % cross(R_Gravity*new_n_keelfoil,K_gravity);
            % 
            % boat_reaction(2,:) = boat_reaction(2,:) + K_torque;
            % 
            % % change to new heel
            % boat_heel = new_boat_heel;

        end
    end
end

